################################################################################
# Atmel AT91SAMA5D3X-EK eval board
################################################################################

########################################
# Known Issues with SAMA5DXX and openocd
########################################
#1.  The JTAG circuitry is disabled at reset. Has something to do with their
#    secure boot ROM code.
#2.  To get OpenOCD to work with this board, the board must be started up in
#    SAM-BA mode with a USB device cable connected. A 'V#' command must be sent
#    to the unit to enable jtag circuitry.
#3.  The 'mon reset halt' and 'mon reset init' commands currently does not work
#    properly

if { [info exists BOARDID] } {
   set _BOARDID $BOARDID
   if {[string equal "atmel_sama5d3_xplained" $_BOARDID]} {
	set TPR1_VALUE 			0x02c81311
	set TPR2_VALUE 			0x00062288
	set CR_VALUE_RESET_ENABLE 	0x00f200b9
	set CR_VALUE 			0x00f20039
	set RTR_VALUE 			0x0000040f
   }
} else {
   set _BOARDID 			at91sama5d3X-ek
   set CHIPNAME 			at91sama5d3x
   set TPR1_VALUE 			0x02c81c1a
   set TPR2_VALUE 			0x00072278
   set CR_VALUE_RESET_ENABLE 		0x00f200bd
   set CR_VALUE 			0x00f2003d
   set RTR_VALUE 			0x00000411
}

reset_config trst_and_srst

transport select jtag

source [find mem_helper.tcl]
source [find target/at91sama5dXX.cfg]

# The SAMA5D3 has two SRAM areas, one starting at 0x00300000 and the other starting at 0x00310000.
# Both areas are 64 kB long.
$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x00300000 -work-area-size 0x20000 -work-area-backup 1

$_TARGETNAME configure -event reset-init { at91sama5d3_init }

proc at91sama5d3_init { } {

	global _BOARDID
	global TPR1_VALUE
	global TPR2_VALUE
	global CR_VALUE_RESET_ENABLE
	global CR_VALUE
	global RTR_VALUE
	set PMC_SCER		0xfffffc00
	set CKGR_MOR		0xfffffc20
	set CKGR_PLLAR		0xfffffc28
	set PMC_MCKR		0xfffffc30
	set PMC_SR		0xfffffc68
	set PMC_PLLICPR		0xfffffc80
	set PMC_PCER1		0xfffffd00
	set WDT_MR 		0xfffffe44
	set MPDDRC_MR		0xffffea00
	set MPDDRC_RTR		0xffffea04
	set MPDDRC_CR		0xffffea08
	set MPDDRC_TPR0		0xffffea0c
	set MPDDRC_TPR1		0xffffea10
	set MPDDRC_TPR2		0xffffea14
	set MPDDRC_MD		0xffffea20
	set MPDDRC_IO_CALIBR	0xffffea34
	set MPDDRC_DLL_MO	0xffffea74
	set MPDDRC_DLL_SOF	0xffffea78

	echo "Initializing $_BOARDID"

	adapter_khz 100
	# First disable watchdog
	mww $WDT_MR 0x00008000
	# WDT_MR : disable watchdog.
	# Enable the main 18.432 MHz oscillator in CKGR_MOR register.

	mww $CKGR_MOR 0x00374009;# Keep RC oscillator enabled
	while { [expr [mrw $PMC_SR] & 0x00000001] == 0 } { sleep 1 }
	mww $CKGR_MOR 0x01374009;# Keep RC oscillator enabled
	while { [expr [mrw $PMC_SR] & 0x00010000] == 0 } { sleep 1 }
	mww $CKGR_MOR 0x01374001;# Disable RC oscillator

	# Select main system clock. Set processor clock divide by 2 in PMC_MCKR.
	# Wait for MCKRDY signal from PMC_SR to assert.

	mww $PMC_MCKR 0x00000001
	while { [expr [mrw $PMC_SR] & 0x08] == 0 } { sleep 1 }

	# Set PLLA Register for 528 MHz (divider: bypass, multiplier: 43).
	# Wait for LOCKA signal in PMC_SR to assert indicating PLLA is stable.
	# PCK = 528MHz, MCK = 132MHz
	mww $CKGR_PLLAR 0x20ac3f01
	while { [expr [mrw $PMC_SR] & 0x02] == 0 } { sleep 1 }
	#Initialize PLLA charge pump
	mww $PMC_PLLICPR 0x00000300

	# Now change PMC_MCKR register to select PLLA.
	# Wait for MCKRDY signal from PMC_SR to assert.

	mww $PMC_MCKR 0x00000202
	while { [expr [mrw $PMC_SR] & 0x08] == 0 } { sleep 1 }

	#  Processor and master clocks are now operating and stable at following frequencies:
	#	-> MCLK = 133 MHz
	#	-> PCLK = 528 MHz
	# Adaptive clocking not possible - no rtck connected on at91sama5d3X-ek CM boards
	# adapter_khz 0
	# Enable faster DCC downloads and memory accesses.
	########################################################################
	#Enabling DRAM
	########################################################################
	#Enabling periph clock for MPDDR
	mww $PMC_PCER1 0x00020000
	#enabling system clock
	mww $PMC_SCER 0x00000004

	# Init the special register for sama5d3x
	# MPDDRC DLL Slave Offset Register: DDR2 configuration
	mww $MPDDRC_DLL_SOF 0x01010001

	# MPDDRC DLL Master Offset Register
	# write master + clk90 offset
	mww $MPDDRC_DLL_MO 0xc5010107
	# MPDDRC I/O Calibration Register
	# DDR2 RZQ = 50 Ohm
	# TZQIO = 4
	mww $MPDDRC_IO_CALIBR 0x00000404

	# Now Start the DRAM init dance..
	# 1. Program the memory device type into the Memory Device Register
	mww $MPDDRC_MD 0x00000006

	# 2a. Program the feature of DDR2-SDRAM device into the Configuration Register
	mww $MPDDRC_CR $CR_VALUE
	# 2b. Program the feature of DDR2-SDRAM device into the Timing Register
	#TPR0
	mww $MPDDRC_TPR0 0x22228226
	#TPR1
	mww $MPDDRC_TPR2 $TPR1_VALUE
	#TPR2
	mww $MPDDRC_TPR2 $TPR2_VALUE

	# 3. Next issue a 'NOP' command through the MPDDRC_MR register followed by writing a zero value into
	# the starting memory location for the SDRAM.
	mww $MPDDRC_MR 0x00000001
	mww 0x20000000 0
	sleep 1

	# 4. An NOP command is issued to the DDR2-SDRAM
	mww $MPDDRC_MR 0x00000001
	mww 0x20000000 0
	sleep 1

	# 5. An all banks precharge command is issued to the DDR2-SDRAM.
	mww $MPDDRC_MR 0x00000010
	mww 0x20000000 0
	sleep 1

	# 6. An Extended Mode Register set(EMRS2) cycle is issued to chose between commercial or high
	# temperature operations.
	# Perform a write access to DDR2-SDRAM to acknowledge this command.
	# The write address must be chosen so that BA[1] is set to 1 and BA[0] is set to 0.

	mww $MPDDRC_MR 0x00000005
	mww 0x20002000 0
	sleep 1

	# 7. An Extended Mode Register set(EMRS3) cycle is issued
	# to set the Extended Mode Register to "0".
	# Perform a write access to DDR2-SDRAM to acknowledge this command.
	# The write address must be chosen so that BA[1] is set to 1 and BA[0] is set to 1.

	mww $MPDDRC_MR 0x00000005
	mww 0x20003000 0
	sleep 1

	# 8. An Extened Mode Register set(EMRS1) cycle is issued to enable DLL,
	# and to program D.I.C(Output Driver Impedance Control)
	# Perform a write access to DDR2-SDRAM to acknowledge this command.
	# The write address must be chosen so that BA[1] is set to 0 and BA[0] is set to 1.

	mww $MPDDRC_MR 0x00000005
	mww 0x20001000 0
	sleep 1

	# 9. Program DLL field into the Configuration Register to high(Enable DLL reset)
	mww $MPDDRC_CR $CR_VALUE_RESET_ENABLE

	# 10. A Mode Register set(MRS) cycle is issied to reset DLL.
	# Perform a write access to DDR2-SDRAM to acknowledge this command.
	# The write address must be chosen so that BA[1:0] bits are set to 0.

	mww $MPDDRC_MR 0x00000003
	mww 0x20000000 0
	sleep 1

	# 11. An all banks precharge command is issued to the DDR2-SDRAM.
	mww $MPDDRC_MR 0x00000002
	mww 0x20000000 0
	sleep 1

	# 12. 2 Auto-refresh commands
	mww $MPDDRC_MR 0x00000004
	mww 0x20000000 0
	sleep 1
	mww $MPDDRC_MR 0x00000004
	mww 0x20000000 0
	sleep 1

	# 13. Program DLL field into the Configuration Register to low(Disable DLL reset)
	mww $MPDDRC_CR $CR_VALUE

	# 14. A Mode Register set (MRS) cycle is issued to program
	# the parameters of the DDR2-SDRAM devices, in particular CAS latency,
	# burst length and to disable DDL reset.
	# Perform a write access to DDR2-SDRAM to acknowledge this command.
	# The write address must be chosen so that BA[1:0] bits are set to 0.
	mww $MPDDRC_MR 0x00000003
	mww 0x20000000 0
	sleep 1

	# 15. Program OCD field into the Configuration Register
	# to high (OCD calibration default).
	mww $MPDDRC_CR $CR_VALUE
	sleep 1

	# 16. An Extended Mode Register set (EMRS1) cycle is issued to OCD default value.
	# Perform a write access to DDR2-SDRAM to acknowledge this command.
	# The write address must be chosen so that BA[1] is set to 0 and BA[0] is set to 1.
	mww $MPDDRC_MR 0x00000005
	mww 0x20001000 0
	sleep 1

	#17. Program OCD field into the Configuration Register
	# to low (OCD calibration mode exit).
	mww $MPDDRC_CR 0x00f2003d
	sleep 1

	# 18. An Extended Mode Register set (EMRS1) cycle is issued to OCD default value.
	# Perform a write access to DDR2-SDRAM to acknowledge this command.
	# The write address must be chosen so that BA[1] is set to 0 and BA[0] is set to 1.
	mww $MPDDRC_MR 0x00000005
	mww 0x20001000 0
	sleep 1

	# 19. A Nornal mode command is provided.
	mww $MPDDRC_MR 0x00000000
	mww 0x20000000 0
	# 20. Perform a write access to any DDR2-SDRAM address
	mww 0x20000000 0

	# 21. Write the refresh rate into the count field in the Refresh Timer register.(Refresh timer: 7.8125us)
	mww $MPDDRC_RTR $RTR_VALUE

	# Now we are ready to work on the DDRSDR, wait for end of calibration
	sleep 1

	adapter_khz 1000
}
